#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QCPolicy
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Appendix")]
	public partial class ConfigDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQueue(Queue instance);
    partial void UpdateQueue(Queue instance);
    partial void DeleteQueue(Queue instance);
    partial void InsertSubQueue(SubQueue instance);
    partial void UpdateSubQueue(SubQueue instance);
    partial void DeleteSubQueue(SubQueue instance);
    partial void InsertOperatorConfig(OperatorConfig instance);
    partial void UpdateOperatorConfig(OperatorConfig instance);
    partial void DeleteOperatorConfig(OperatorConfig instance);
    #endregion
		
		public ConfigDataContext() : 
				base(global::QCPolicy.Properties.Settings.Default.AppendixConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConfigDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConfigDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConfigDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConfigDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Queue> Queues
		{
			get
			{
				return this.GetTable<Queue>();
			}
		}
		
		public System.Data.Linq.Table<SubQueue> SubQueues
		{
			get
			{
				return this.GetTable<SubQueue>();
			}
		}
		
		public System.Data.Linq.Table<OperatorConfig> OperatorConfigs
		{
			get
			{
				return this.GetTable<OperatorConfig>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Queue")]
	public partial class Queue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueID;
		
		private string _QueueName;
		
		private EntitySet<SubQueue> _SubQueues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueIDChanging(int value);
    partial void OnQueueIDChanged();
    partial void OnQueueNameChanging(string value);
    partial void OnQueueNameChanged();
    #endregion
		
		public Queue()
		{
			this._SubQueues = new EntitySet<SubQueue>(new Action<SubQueue>(this.attach_SubQueues), new Action<SubQueue>(this.detach_SubQueues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QueueID
		{
			get
			{
				return this._QueueID;
			}
			set
			{
				if ((this._QueueID != value))
				{
					this.OnQueueIDChanging(value);
					this.SendPropertyChanging();
					this._QueueID = value;
					this.SendPropertyChanged("QueueID");
					this.OnQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string QueueName
		{
			get
			{
				return this._QueueName;
			}
			set
			{
				if ((this._QueueName != value))
				{
					this.OnQueueNameChanging(value);
					this.SendPropertyChanging();
					this._QueueName = value;
					this.SendPropertyChanged("QueueName");
					this.OnQueueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Queue_SubQueue", Storage="_SubQueues", ThisKey="QueueID", OtherKey="QueueID")]
		public EntitySet<SubQueue> SubQueues
		{
			get
			{
				return this._SubQueues;
			}
			set
			{
				this._SubQueues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubQueues(SubQueue entity)
		{
			this.SendPropertyChanging();
			entity.Queue = this;
		}
		
		private void detach_SubQueues(SubQueue entity)
		{
			this.SendPropertyChanging();
			entity.Queue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubQueue")]
	public partial class SubQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubQueueID;
		
		private int _QueueID;
		
		private string _SubQueueName;
		
		private bool _AllowSelection;
		
		private int _Frequency;
		
		private int _NumberSinceLastEval;
		
		private EntityRef<Queue> _Queue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubQueueIDChanging(int value);
    partial void OnSubQueueIDChanged();
    partial void OnQueueIDChanging(int value);
    partial void OnQueueIDChanged();
    partial void OnSubQueueNameChanging(string value);
    partial void OnSubQueueNameChanged();
    partial void OnAllowSelectionChanging(bool value);
    partial void OnAllowSelectionChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnNumberSinceLastEvalChanging(int value);
    partial void OnNumberSinceLastEvalChanged();
    #endregion
		
		public SubQueue()
		{
			this._Queue = default(EntityRef<Queue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQueueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubQueueID
		{
			get
			{
				return this._SubQueueID;
			}
			set
			{
				if ((this._SubQueueID != value))
				{
					this.OnSubQueueIDChanging(value);
					this.SendPropertyChanging();
					this._SubQueueID = value;
					this.SendPropertyChanged("SubQueueID");
					this.OnSubQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueID", DbType="Int NOT NULL")]
		public int QueueID
		{
			get
			{
				return this._QueueID;
			}
			set
			{
				if ((this._QueueID != value))
				{
					if (this._Queue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueueIDChanging(value);
					this.SendPropertyChanging();
					this._QueueID = value;
					this.SendPropertyChanged("QueueID");
					this.OnQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQueueName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SubQueueName
		{
			get
			{
				return this._SubQueueName;
			}
			set
			{
				if ((this._SubQueueName != value))
				{
					this.OnSubQueueNameChanging(value);
					this.SendPropertyChanging();
					this._SubQueueName = value;
					this.SendPropertyChanged("SubQueueName");
					this.OnSubQueueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowSelection", DbType="Bit NOT NULL")]
		public bool AllowSelection
		{
			get
			{
				return this._AllowSelection;
			}
			set
			{
				if ((this._AllowSelection != value))
				{
					this.OnAllowSelectionChanging(value);
					this.SendPropertyChanging();
					this._AllowSelection = value;
					this.SendPropertyChanged("AllowSelection");
					this.OnAllowSelectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberSinceLastEval", DbType="Int NOT NULL")]
		public int NumberSinceLastEval
		{
			get
			{
				return this._NumberSinceLastEval;
			}
			set
			{
				if ((this._NumberSinceLastEval != value))
				{
					this.OnNumberSinceLastEvalChanging(value);
					this.SendPropertyChanging();
					this._NumberSinceLastEval = value;
					this.SendPropertyChanged("NumberSinceLastEval");
					this.OnNumberSinceLastEvalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Queue_SubQueue", Storage="_Queue", ThisKey="QueueID", OtherKey="QueueID", IsForeignKey=true)]
		public Queue Queue
		{
			get
			{
				return this._Queue.Entity;
			}
			set
			{
				Queue previousValue = this._Queue.Entity;
				if (((previousValue != value) 
							|| (this._Queue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Queue.Entity = null;
						previousValue.SubQueues.Remove(this);
					}
					this._Queue.Entity = value;
					if ((value != null))
					{
						value.SubQueues.Add(this);
						this._QueueID = value.QueueID;
					}
					else
					{
						this._QueueID = default(int);
					}
					this.SendPropertyChanged("Queue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorConfig")]
	public partial class OperatorConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperatorConfigID;
		
		private System.Guid _OperatorKey;
		
		private bool _UnderEvaluation;
		
		private int _Frequency;
		
		private int _NumberSinceLastEval;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperatorConfigIDChanging(int value);
    partial void OnOperatorConfigIDChanged();
    partial void OnOperatorKeyChanging(System.Guid value);
    partial void OnOperatorKeyChanged();
    partial void OnUnderEvaluationChanging(bool value);
    partial void OnUnderEvaluationChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnNumberSinceLastEvalChanging(int value);
    partial void OnNumberSinceLastEvalChanged();
    #endregion
		
		public OperatorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorConfigID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OperatorConfigID
		{
			get
			{
				return this._OperatorConfigID;
			}
			set
			{
				if ((this._OperatorConfigID != value))
				{
					this.OnOperatorConfigIDChanging(value);
					this.SendPropertyChanging();
					this._OperatorConfigID = value;
					this.SendPropertyChanged("OperatorConfigID");
					this.OnOperatorConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OperatorKey
		{
			get
			{
				return this._OperatorKey;
			}
			set
			{
				if ((this._OperatorKey != value))
				{
					this.OnOperatorKeyChanging(value);
					this.SendPropertyChanging();
					this._OperatorKey = value;
					this.SendPropertyChanged("OperatorKey");
					this.OnOperatorKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnderEvaluation", DbType="Bit NOT NULL")]
		public bool UnderEvaluation
		{
			get
			{
				return this._UnderEvaluation;
			}
			set
			{
				if ((this._UnderEvaluation != value))
				{
					this.OnUnderEvaluationChanging(value);
					this.SendPropertyChanging();
					this._UnderEvaluation = value;
					this.SendPropertyChanged("UnderEvaluation");
					this.OnUnderEvaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberSinceLastEval", DbType="Int NOT NULL")]
		public int NumberSinceLastEval
		{
			get
			{
				return this._NumberSinceLastEval;
			}
			set
			{
				if ((this._NumberSinceLastEval != value))
				{
					this.OnNumberSinceLastEvalChanging(value);
					this.SendPropertyChanging();
					this._NumberSinceLastEval = value;
					this.SendPropertyChanged("NumberSinceLastEval");
					this.OnNumberSinceLastEvalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
