#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserTasks
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Appendix")]
	public partial class UserTasksDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQueue(Queue instance);
    partial void UpdateQueue(Queue instance);
    partial void DeleteQueue(Queue instance);
    partial void InsertSubQueue(SubQueue instance);
    partial void UpdateSubQueue(SubQueue instance);
    partial void DeleteSubQueue(SubQueue instance);
    partial void InsertOperatorConfig(OperatorConfig instance);
    partial void UpdateOperatorConfig(OperatorConfig instance);
    partial void DeleteOperatorConfig(OperatorConfig instance);
    partial void InsertQueueInstance(QueueInstance instance);
    partial void UpdateQueueInstance(QueueInstance instance);
    partial void DeleteQueueInstance(QueueInstance instance);
    partial void InsertQueueTrack(QueueTrack instance);
    partial void UpdateQueueTrack(QueueTrack instance);
    partial void DeleteQueueTrack(QueueTrack instance);
    #endregion
		
		public UserTasksDataContext() : 
				base(global::UserTasks.Properties.Settings.Default.AppendixConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UserTasksDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserTasksDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserTasksDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserTasksDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Queue> Queues
		{
			get
			{
				return this.GetTable<Queue>();
			}
		}
		
		public System.Data.Linq.Table<SubQueue> SubQueues
		{
			get
			{
				return this.GetTable<SubQueue>();
			}
		}
		
		public System.Data.Linq.Table<OperatorConfig> OperatorConfigs
		{
			get
			{
				return this.GetTable<OperatorConfig>();
			}
		}
		
		public System.Data.Linq.Table<QueueInstance> QueueInstances
		{
			get
			{
				return this.GetTable<QueueInstance>();
			}
		}
		
		public System.Data.Linq.Table<QueueTrack> QueueTracks
		{
			get
			{
				return this.GetTable<QueueTrack>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Queue")]
	public partial class Queue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueID;
		
		private string _QueueName;
		
		private bool _SupportsQC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueIDChanging(int value);
    partial void OnQueueIDChanged();
    partial void OnQueueNameChanging(string value);
    partial void OnQueueNameChanged();
    partial void OnSupportsQCChanging(bool value);
    partial void OnSupportsQCChanged();
    #endregion
		
		public Queue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QueueID
		{
			get
			{
				return this._QueueID;
			}
			set
			{
				if ((this._QueueID != value))
				{
					this.OnQueueIDChanging(value);
					this.SendPropertyChanging();
					this._QueueID = value;
					this.SendPropertyChanged("QueueID");
					this.OnQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string QueueName
		{
			get
			{
				return this._QueueName;
			}
			set
			{
				if ((this._QueueName != value))
				{
					this.OnQueueNameChanging(value);
					this.SendPropertyChanging();
					this._QueueName = value;
					this.SendPropertyChanged("QueueName");
					this.OnQueueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportsQC", DbType="bit")]
		public bool SupportsQC
		{
			get
			{
				return this._SupportsQC;
			}
			set
			{
				if ((this._SupportsQC != value))
				{
					this.OnSupportsQCChanging(value);
					this.SendPropertyChanging();
					this._SupportsQC = value;
					this.SendPropertyChanged("SupportsQC");
					this.OnSupportsQCChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubQueue")]
	public partial class SubQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubQueueID;
		
		private int _QueueID;
		
		private string _SubQueueName;
		
		private bool _AllowSelection;
		
		private int _Frequency;
		
		private int _NumberSinceLastEval;
		
		private EntitySet<QueueTrack> _QueueTracks;
		
		private EntityRef<Queue> _Queue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubQueueIDChanging(int value);
    partial void OnSubQueueIDChanged();
    partial void OnQueueIDChanging(int value);
    partial void OnQueueIDChanged();
    partial void OnSubQueueNameChanging(string value);
    partial void OnSubQueueNameChanged();
    partial void OnAllowSelectionChanging(bool value);
    partial void OnAllowSelectionChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnNumberSinceLastEvalChanging(int value);
    partial void OnNumberSinceLastEvalChanged();
    #endregion
		
		public SubQueue()
		{
			this._QueueTracks = new EntitySet<QueueTrack>(new Action<QueueTrack>(this.attach_QueueTracks), new Action<QueueTrack>(this.detach_QueueTracks));
			this._Queue = default(EntityRef<Queue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQueueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubQueueID
		{
			get
			{
				return this._SubQueueID;
			}
			set
			{
				if ((this._SubQueueID != value))
				{
					this.OnSubQueueIDChanging(value);
					this.SendPropertyChanging();
					this._SubQueueID = value;
					this.SendPropertyChanged("SubQueueID");
					this.OnSubQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueID", DbType="Int NOT NULL")]
		public int QueueID
		{
			get
			{
				return this._QueueID;
			}
			set
			{
				if ((this._QueueID != value))
				{
					if (this._Queue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueueIDChanging(value);
					this.SendPropertyChanging();
					this._QueueID = value;
					this.SendPropertyChanged("QueueID");
					this.OnQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQueueName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SubQueueName
		{
			get
			{
				return this._SubQueueName;
			}
			set
			{
				if ((this._SubQueueName != value))
				{
					this.OnSubQueueNameChanging(value);
					this.SendPropertyChanging();
					this._SubQueueName = value;
					this.SendPropertyChanged("SubQueueName");
					this.OnSubQueueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowSelection", DbType="Bit NOT NULL")]
		public bool AllowSelection
		{
			get
			{
				return this._AllowSelection;
			}
			set
			{
				if ((this._AllowSelection != value))
				{
					this.OnAllowSelectionChanging(value);
					this.SendPropertyChanging();
					this._AllowSelection = value;
					this.SendPropertyChanged("AllowSelection");
					this.OnAllowSelectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberSinceLastEval", DbType="Int NOT NULL")]
		public int NumberSinceLastEval
		{
			get
			{
				return this._NumberSinceLastEval;
			}
			set
			{
				if ((this._NumberSinceLastEval != value))
				{
					this.OnNumberSinceLastEvalChanging(value);
					this.SendPropertyChanging();
					this._NumberSinceLastEval = value;
					this.SendPropertyChanged("NumberSinceLastEval");
					this.OnNumberSinceLastEvalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubQueue_QueueTrack", Storage="_QueueTracks", ThisKey="SubQueueID", OtherKey="SubQueueID")]
		public EntitySet<QueueTrack> QueueTracks
		{
			get
			{
				return this._QueueTracks;
			}
			set
			{
				this._QueueTracks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Queue_SubQueue", Storage="_Queue", ThisKey="QueueID", OtherKey="QueueID", IsForeignKey=true)]
		public Queue Queue
		{
			get
			{
				return this._Queue.Entity;
			}
			set
			{
				if ((this._Queue.Entity != value))
				{
					this.SendPropertyChanging();
					this._Queue.Entity = value;
					this.SendPropertyChanged("Queue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QueueTracks(QueueTrack entity)
		{
			this.SendPropertyChanging();
			entity.SubQueue = this;
		}
		
		private void detach_QueueTracks(QueueTrack entity)
		{
			this.SendPropertyChanging();
			entity.SubQueue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorConfig")]
	public partial class OperatorConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperatorConfigID;
		
		private System.Guid _OperatorKey;
		
		private bool _UnderEvaluation;
		
		private int _Frequency;
		
		private int _NumberSinceLastEval;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperatorConfigIDChanging(int value);
    partial void OnOperatorConfigIDChanged();
    partial void OnOperatorKeyChanging(System.Guid value);
    partial void OnOperatorKeyChanged();
    partial void OnUnderEvaluationChanging(bool value);
    partial void OnUnderEvaluationChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnNumberSinceLastEvalChanging(int value);
    partial void OnNumberSinceLastEvalChanged();
    #endregion
		
		public OperatorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorConfigID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OperatorConfigID
		{
			get
			{
				return this._OperatorConfigID;
			}
			set
			{
				if ((this._OperatorConfigID != value))
				{
					this.OnOperatorConfigIDChanging(value);
					this.SendPropertyChanging();
					this._OperatorConfigID = value;
					this.SendPropertyChanged("OperatorConfigID");
					this.OnOperatorConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OperatorKey
		{
			get
			{
				return this._OperatorKey;
			}
			set
			{
				if ((this._OperatorKey != value))
				{
					this.OnOperatorKeyChanging(value);
					this.SendPropertyChanging();
					this._OperatorKey = value;
					this.SendPropertyChanged("OperatorKey");
					this.OnOperatorKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnderEvaluation", DbType="Bit NOT NULL")]
		public bool UnderEvaluation
		{
			get
			{
				return this._UnderEvaluation;
			}
			set
			{
				if ((this._UnderEvaluation != value))
				{
					this.OnUnderEvaluationChanging(value);
					this.SendPropertyChanging();
					this._UnderEvaluation = value;
					this.SendPropertyChanged("UnderEvaluation");
					this.OnUnderEvaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberSinceLastEval", DbType="Int NOT NULL")]
		public int NumberSinceLastEval
		{
			get
			{
				return this._NumberSinceLastEval;
			}
			set
			{
				if ((this._NumberSinceLastEval != value))
				{
					this.OnNumberSinceLastEvalChanging(value);
					this.SendPropertyChanging();
					this._NumberSinceLastEval = value;
					this.SendPropertyChanged("NumberSinceLastEval");
					this.OnNumberSinceLastEvalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QueueInstance")]
	public partial class QueueInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueInstanceID;
		
		private System.Guid _InstanceID;
		
		private System.DateTime _CreateDate;
		
		private System.Nullable<int> _CurrentSubQueueID;
		
		private bool _QC;
		
		private System.Nullable<System.DateTime> _AssignedDate;
		
		private System.Nullable<int> _AssignedOperatorID;
		
		private System.Nullable<int> _Priority;
		
		private System.Guid _QueueInstanceKey;
		
		private EntityRef<OperatorConfig> _OperatorConfig;
		
		private EntityRef<SubQueue> _SubQueue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueInstanceIDChanging(int value);
    partial void OnQueueInstanceIDChanged();
    partial void OnInstanceIDChanging(System.Guid value);
    partial void OnInstanceIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCurrentSubQueueIDChanging(System.Nullable<int> value);
    partial void OnCurrentSubQueueIDChanged();
    partial void OnQCChanging(bool value);
    partial void OnQCChanged();
    partial void OnAssignedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssignedDateChanged();
    partial void OnAssignedOperatorIDChanging(System.Nullable<int> value);
    partial void OnAssignedOperatorIDChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    partial void OnQueueInstanceKeyChanging(System.Guid value);
    partial void OnQueueInstanceKeyChanged();
    #endregion
		
		public QueueInstance()
		{
			this._OperatorConfig = default(EntityRef<OperatorConfig>);
			this._SubQueue = default(EntityRef<SubQueue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueInstanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QueueInstanceID
		{
			get
			{
				return this._QueueInstanceID;
			}
			set
			{
				if ((this._QueueInstanceID != value))
				{
					this.OnQueueInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._QueueInstanceID = value;
					this.SendPropertyChanged("QueueInstanceID");
					this.OnQueueInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstanceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentSubQueueID", DbType="Int")]
		public System.Nullable<int> CurrentSubQueueID
		{
			get
			{
				return this._CurrentSubQueueID;
			}
			set
			{
				if ((this._CurrentSubQueueID != value))
				{
					if (this._SubQueue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentSubQueueIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentSubQueueID = value;
					this.SendPropertyChanged("CurrentSubQueueID");
					this.OnCurrentSubQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QC", DbType="Bit NOT NULL")]
		public bool QC
		{
			get
			{
				return this._QC;
			}
			set
			{
				if ((this._QC != value))
				{
					this.OnQCChanging(value);
					this.SendPropertyChanging();
					this._QC = value;
					this.SendPropertyChanged("QC");
					this.OnQCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AssignedDate
		{
			get
			{
				return this._AssignedDate;
			}
			set
			{
				if ((this._AssignedDate != value))
				{
					this.OnAssignedDateChanging(value);
					this.SendPropertyChanging();
					this._AssignedDate = value;
					this.SendPropertyChanged("AssignedDate");
					this.OnAssignedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedOperatorID", DbType="Int")]
		public System.Nullable<int> AssignedOperatorID
		{
			get
			{
				return this._AssignedOperatorID;
			}
			set
			{
				if ((this._AssignedOperatorID != value))
				{
					if (this._OperatorConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedOperatorIDChanging(value);
					this.SendPropertyChanging();
					this._AssignedOperatorID = value;
					this.SendPropertyChanged("AssignedOperatorID");
					this.OnAssignedOperatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="int")]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueInstanceKey", DbType="uniqueidentifier")]
		public System.Guid QueueInstanceKey
		{
			get
			{
				return this._QueueInstanceKey;
			}
			set
			{
				if ((this._QueueInstanceKey != value))
				{
					this.OnQueueInstanceKeyChanging(value);
					this.SendPropertyChanging();
					this._QueueInstanceKey = value;
					this.SendPropertyChanged("QueueInstanceKey");
					this.OnQueueInstanceKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorConfig_QueueInstance", Storage="_OperatorConfig", ThisKey="AssignedOperatorID", OtherKey="OperatorConfigID", IsForeignKey=true)]
		public OperatorConfig OperatorConfig
		{
			get
			{
				return this._OperatorConfig.Entity;
			}
			set
			{
				if ((this._OperatorConfig.Entity != value))
				{
					this.SendPropertyChanging();
					this._OperatorConfig.Entity = value;
					this.SendPropertyChanged("OperatorConfig");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubQueue_QueueInstance", Storage="_SubQueue", ThisKey="CurrentSubQueueID", OtherKey="SubQueueID", IsForeignKey=true)]
		public SubQueue SubQueue
		{
			get
			{
				return this._SubQueue.Entity;
			}
			set
			{
				if ((this._SubQueue.Entity != value))
				{
					this.SendPropertyChanging();
					this._SubQueue.Entity = value;
					this.SendPropertyChanged("SubQueue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QueueTrack")]
	public partial class QueueTrack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueTrackID;
		
		private string _EventType;
		
		private System.Guid _QueueInstanceKey;
		
		private System.Nullable<int> _SubQueueID;
		
		private System.Nullable<bool> _QC;
		
		private System.Nullable<System.Guid> _OperatorKey;
		
		private System.DateTime _EventDate;
		
		private EntityRef<SubQueue> _SubQueue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueTrackIDChanging(int value);
    partial void OnQueueTrackIDChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnQueueInstanceKeyChanging(System.Guid value);
    partial void OnQueueInstanceKeyChanged();
    partial void OnSubQueueIDChanging(System.Nullable<int> value);
    partial void OnSubQueueIDChanged();
    partial void OnQCChanging(System.Nullable<bool> value);
    partial void OnQCChanged();
    partial void OnOperatorKeyChanging(System.Nullable<System.Guid> value);
    partial void OnOperatorKeyChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    #endregion
		
		public QueueTrack()
		{
			this._SubQueue = default(EntityRef<SubQueue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueTrackID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QueueTrackID
		{
			get
			{
				return this._QueueTrackID;
			}
			set
			{
				if ((this._QueueTrackID != value))
				{
					this.OnQueueTrackIDChanging(value);
					this.SendPropertyChanging();
					this._QueueTrackID = value;
					this.SendPropertyChanged("QueueTrackID");
					this.OnQueueTrackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueInstanceKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QueueInstanceKey
		{
			get
			{
				return this._QueueInstanceKey;
			}
			set
			{
				if ((this._QueueInstanceKey != value))
				{
					this.OnQueueInstanceKeyChanging(value);
					this.SendPropertyChanging();
					this._QueueInstanceKey = value;
					this.SendPropertyChanged("QueueInstanceKey");
					this.OnQueueInstanceKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQueueID", DbType="Int")]
		public System.Nullable<int> SubQueueID
		{
			get
			{
				return this._SubQueueID;
			}
			set
			{
				if ((this._SubQueueID != value))
				{
					if (this._SubQueue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubQueueIDChanging(value);
					this.SendPropertyChanging();
					this._SubQueueID = value;
					this.SendPropertyChanged("SubQueueID");
					this.OnSubQueueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QC", DbType="Bit")]
		public System.Nullable<bool> QC
		{
			get
			{
				return this._QC;
			}
			set
			{
				if ((this._QC != value))
				{
					this.OnQCChanging(value);
					this.SendPropertyChanging();
					this._QC = value;
					this.SendPropertyChanged("QC");
					this.OnQCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorKey", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OperatorKey
		{
			get
			{
				return this._OperatorKey;
			}
			set
			{
				if ((this._OperatorKey != value))
				{
					this.OnOperatorKeyChanging(value);
					this.SendPropertyChanging();
					this._OperatorKey = value;
					this.SendPropertyChanged("OperatorKey");
					this.OnOperatorKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubQueue_QueueTrack", Storage="_SubQueue", ThisKey="SubQueueID", OtherKey="SubQueueID", IsForeignKey=true)]
		public SubQueue SubQueue
		{
			get
			{
				return this._SubQueue.Entity;
			}
			set
			{
				SubQueue previousValue = this._SubQueue.Entity;
				if (((previousValue != value) 
							|| (this._SubQueue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubQueue.Entity = null;
						previousValue.QueueTracks.Remove(this);
					}
					this._SubQueue.Entity = value;
					if ((value != null))
					{
						value.QueueTracks.Add(this);
						this._SubQueueID = value.SubQueueID;
					}
					else
					{
						this._SubQueueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubQueue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
